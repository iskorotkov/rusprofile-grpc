// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompanyFinderClient is the client API for CompanyFinder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyFinderClient interface {
	ByINN(ctx context.Context, in *INN, opts ...grpc.CallOption) (*Company, error)
}

type companyFinderClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyFinderClient(cc grpc.ClientConnInterface) CompanyFinderClient {
	return &companyFinderClient{cc}
}

func (c *companyFinderClient) ByINN(ctx context.Context, in *INN, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, "/rusprofile.CompanyFinder/ByINN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyFinderServer is the server API for CompanyFinder service.
// All implementations must embed UnimplementedCompanyFinderServer
// for forward compatibility
type CompanyFinderServer interface {
	ByINN(context.Context, *INN) (*Company, error)
	mustEmbedUnimplementedCompanyFinderServer()
}

// UnimplementedCompanyFinderServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyFinderServer struct {
}

func (UnimplementedCompanyFinderServer) ByINN(context.Context, *INN) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByINN not implemented")
}
func (UnimplementedCompanyFinderServer) mustEmbedUnimplementedCompanyFinderServer() {}

// UnsafeCompanyFinderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyFinderServer will
// result in compilation errors.
type UnsafeCompanyFinderServer interface {
	mustEmbedUnimplementedCompanyFinderServer()
}

func RegisterCompanyFinderServer(s grpc.ServiceRegistrar, srv CompanyFinderServer) {
	s.RegisterService(&CompanyFinder_ServiceDesc, srv)
}

func _CompanyFinder_ByINN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(INN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyFinderServer).ByINN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusprofile.CompanyFinder/ByINN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyFinderServer).ByINN(ctx, req.(*INN))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyFinder_ServiceDesc is the grpc.ServiceDesc for CompanyFinder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyFinder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rusprofile.CompanyFinder",
	HandlerType: (*CompanyFinderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ByINN",
			Handler:    _CompanyFinder_ByINN_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rusprofilegrpc.proto",
}
